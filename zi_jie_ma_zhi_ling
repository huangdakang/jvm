指令 一个字节长度  代表某种特定操作含义的数字（操作码） 以及其后的零个至多个代表此操作所需的参数（操作数）

 java 虚拟机面向操作数栈   多数  不含操作数只有操作码
   一个字节长度 字节码数不能超过256

  操作码助剂符   有些有专门为那些数据服务的   有些没有指明操作类型 有些与数据类型无关
  单独的指令在必要的时候可以将不支持的类型转化为支持的类型
  大多数杜宇boolean byte short char 都使用相应的int类型作为运算类型

》》》》》》》》》》》》》》》》》》》》》》》》》》》》加载和存储指令
      用于数据在栈真中的局部变量表和操作数栈之间来回传输
     加载到栈中 #load
     存储到局部变量表中 #stroe
     常量加载到操作数栈中 bipush
     扩展局部变量表的访问缩影指令wide
     访问对象字段或数组元素指令也会向操作数栈传输数据
》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》指令运算符
    运算或算数指令用于两个操作数栈上的值进行某种特定的运算，并结果重新存入操作书栈顶
     大致分为两中： 整数运算指令 和浮点型运算指令  ：都是用java虚拟机的运算类型
     byte short char boolean 都使用int 类型来代替
     加法  add
     减法  sub
     乘法  mul
     除法  div
     求余  rem
     求反  neg
     位移  shl shr
     按位或  ior
     按位抑或 ixor
     局部变量自赠 iinc
     比较指令 compg compl comp
     只有除法指令在被除数为0 的时候---》arithmeticException  其余都不应跑出
     精度的选择  ： 要求必须摄入到合适的精度，非精度的结果必须摄入到可被表示的
    最接近的精度  如果一样接近   优先选择最低有效位为0的   向最接近摄入模式

    浮点数转入整数时-----》ieee 754标准向零摄入模式---》数字会被截断，小数部分会被
    丢掉，向零摄入模式 将选择一个最接近但不大于原数字作为最精确的摄入结果
    浮点运算时不会不会跑出运行是异常
    long 会采用 带符号的比较方式
》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》类型转化指令
     将两种不同的类型进行转化，一般用于用户代码中现实的类型转 或者处理字节码指令
      无法与数据类型无法一一对应的问题
     java 虚拟机直接支持一下宽化类性转化 (无需显示的转化) 即小范围到到范围的安全转化


     窄化类型转化 必须使用显示地转化指令来完成 （可能产生不同的正负号）不同数量级的情况
     转化过程很可能导致精度丢失
     转话过程是简单的丢弃位n个字节以外的内容

    规则 nan 0
         不是无穷大  使用向零取整 v在类型t的范围之内那就是v
          负责根据v的符号转化为T能表示的最大或最小的值
          窄化转化指令不抛运行时异常
》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》对象的创建和访问指令
         虚拟机对对类实例和数组的创建使用了不同的字节码指令，
         对象创建后就可以通过对象访问指令获取对象的实例或者数组实例中的字段或者数组元素、
        
         创建类实例指令 new
         创建数组的指令： newarry anewarray multianewarray
         访问类字段 或实例字段 getfiled putfiled getstatic putstatic 
         讲一个数加载到操作数栈中的指令 load
         将一个操作数栈中的值存储到数组元素中的指令：astore
         取数组长度 指令 arraylength
         查找类实例指令：instanceof checkcast
》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》操作数栈管理指令
         类似数据结构中的栈 虚拟机提供了操作操作数栈的指令
        
         将操作数栈栈顶的元素出站  pop pop2
         复制栈顶一个或两个数值并将复制值或复制的双份值重新压入栈顶 dup dup2 dup_x1 dup2_x1 dup_x2
         将栈顶端的两个数值进行互换 swap
》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》控制转移指令
         控制转移指令可以使虚拟机有条件或无条件的从指定的位置指令而不是控制转移指令的下一条指令
         继续执行程序
          从概念模型上讲就是控制转移指令有条件或无条件的的修改pc寄存器的值
           条件分支 if
           复合条件分支 witch
           无条件分之ｇｏＴＯ
　　　　　虚拟机中油专门处理int　和　ｒｅｆｅｒｅｎｃｅ类型的条件分之来进行比较操作
　　　　　　　　　我累可以无需明显的表示一个实体的值是否为null　也有专门的指令来　检测nul值
　　　　　与前面的运算符规则一致　byte short char　也使用int的类型比较指令来完成
          long double条件分支比较先用比较运算指令　－－－－》返回一个整型值到操作数栈
　　　　　然后执行int 来进行比较
》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》方法的调用和返回值指令
　　　　　　　　　invokevirtual 指令用于调用对象的实例方法，根据对象的实际类型进行分派
　　　　ｉｎｖｏｋｅｉｎｔｅｒｆａｃｅ调用接口，运行时搜索实现了这个借口的方法，找出合适的方法进行高勇
　　　　　　　 invokespecial指令用于调用一些需要特殊处理的实例方法　实例初始化方法　私有方法和父类方法
　　　　　　　invokestatic指令用用调用类的方法
　　　　　　　invokedynimic 指令用于运行时动态的解析限定符号所引用的方法　ｉｎ执行该方法

　　　　　　　　方法的调用与返回值无关　　但是方法的返回值指令是通过返回值类型来区分的
》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》异常处理指令
　　　　　　　athrow  虚拟机中异常处理不是通过字节码来实现的而是通过异常表来实现的
》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》同步指令
　　　　　　可以支持方法级的同步和方法内部的一段指令徐磊的同步　这种同步都是通过管城来支持的
　　　　　　隐式的　无需通过字节码指令来控制，她实现在方法调用和返回值操作之中
　　　　　　　　　　通过常亮池的方法表结构中的acc_synchronized访问标志得到一个方发的声明是否为同步方法
》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》共有设计和私有设计的实现
　　　　　　　　　虚拟机共有的程序存储格式：class　文件格式以及字节码指令集　这些内容与硬件，操作系统
　　　　　　　　　　　　及具体的java虚拟机实现之间是完全独立的，　安全的交互手段
　　　　　　　　　　　　　　　　　java虚拟机的实现必须能够读取Class　文件并精确实现包含在其中的java虚拟机代码的语义
　　　　　　　　　可以按java虚拟机一程不变的的逐字实现，优秀的实现是在满足的前提下修改和优化是完全可行　　　　　　　　的、

　　　　　　　　　实现的方法　　翻译成另一种虚拟机的指令集
　　　　　　　　　　　　　　　　翻译成宿主cpu的指令集
　

》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》Ｊａｖa技术实现平台无关　语言无关　　　　　　　的两项特性的重要支柱
　　　　　　　ｃｌａｓｓ文件具有平台中立，紧凑，稳定　可扩展的特点



       
　　　　　　

    




